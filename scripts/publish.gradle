/**
 * Script use for generating and publishing artifacts for github packages
 * Using command: ./gradlew publishAarPublicationToShareChatPackagesRepository -PuseAARForDevBuild=false
 */

apply from: "$rootDir/scripts/local-aar-config.gradle"
apply plugin: 'maven-publish'

static def getArtifactId(projectPath) {
    def artifactId = projectPath.substring(1).replaceAll(":", '-').replaceAll("@", "")
    return artifactId
}

static def getModuleName(artifactId) {
    def moduleName = artifactId.replaceAll("(repository|manager|libraries|feature)(-)((\\w+-|(\\w+))+)", "\$1:\$3")
    return moduleName
}

static def getModuleNameFromDependency(group, name, rootProjectName) {
    def finalModuleName = group.replaceAll("$rootProjectName.", "")
    if (finalModuleName.isBlank() || group == rootProjectName) {
        finalModuleName = name
    } else {
        if (finalModuleName.contains(".")) {
            finalModuleName = finalModuleName.replaceAll("[.]", "-")
        }
        finalModuleName = "$finalModuleName-$name"
    }
    return finalModuleName.replaceAll("@", "")
}

publishing {
    publications {
        aar(MavenPublication) {
            project.tasks.publishAarPublicationToMavenLocal.dependsOn("assembleRelease")
            groupId localAARPublishConfig.groupId
            artifactId getArtifactId(project.path)
            version localAARPublishConfig.version
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each { addDependencyNode(dependencies,it) }
                configurations.api.allDependencies.each { addDependencyNode(dependencies,it) }
            }
        }
    }

    repositories {
        maven {
            name = "ShareChatPackages"
            url = uri("https://maven.pkg.github.com/ShareChat/sharechat-android")
            credentials {
                username = System.getenv("GITHUB_USERNAME") ?: ""
                password = System.getenv("GITHUB_PACKAGE_KEY") ?: ""
            }
        }
        maven {
            url = "$rootDir/localMavenRepository"
        }
        project.tasks.publishAarPublicationToMavenRepository.dependsOn("assembleRelease")
        project.tasks.publishAarPublicationToShareChatPackagesRepository.dependsOn("assembleRelease")
    }
}

private void addDependencyNode(Node dependencies,Dependency it) {
    if (it.group == null || it.group == localAARPublishConfig.groupId) {
        println("ignoring dependency ${it.group}:${it.name}:${it.version}")
        return
    }

    def dependency = dependencies.appendNode('dependency')
    if (it.group.startsWith(rootProject.name)) {
        dependency.appendNode('groupId', localAARPublishConfig.groupId)
        dependency.appendNode('version', localAARPublishConfig.version)
        dependency.appendNode('artifactId', getModuleNameFromDependency(it.group, it.name, rootProject.name))
    } else {
        dependency.appendNode('groupId', it.group)
        dependency.appendNode('version', it.version)
        dependency.appendNode('artifactId', it.name)
    }
}